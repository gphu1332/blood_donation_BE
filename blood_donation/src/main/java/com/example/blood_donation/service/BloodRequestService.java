package com.example.blood_donation.service;

import com.example.blood_donation.dto.BloodRequestDTO;
import com.example.blood_donation.dto.BloodRequestDetailDTO;
import com.example.blood_donation.dto.BloodRequestResponseDTO;
import com.example.blood_donation.entity.*;
import com.example.blood_donation.enums.Role;
import com.example.blood_donation.enums.Status;
import com.example.blood_donation.repository.*;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@Service
public class BloodRequestService {

    @Autowired
    private BloodRequestRepository reqRepo;

    @Autowired
    private BloodRequestDetailRepository detailRepo;

    @Autowired
    private MedicalStaffRepository medicalRepo;

    @Autowired
    private UserRepository userRepository;

    // ‚úÖ 1. T·∫°o y√™u c·∫ßu
    @Transactional
    public BloodRequest createRequestFromDTO(BloodRequestDTO dto) {
        BloodRequest req = new BloodRequest();
        req.setReqCreateDate(LocalDate.now());
        req.setIsEmergency(dto.getIsEmergency());
        req.setStatus(Status.PENDING);
        req.setIsDeleted(false);

        MedicalStaff medicalUser = medicalRepo.findById(dto.getMedId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user"));

        if (medicalUser.getRole() != Role.HOSPITAL_STAFF) {
            throw new RuntimeException("Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† Medical Staff");
        }

        req.setMedicalStaff(medicalUser);
        final BloodRequest savedRequest = reqRepo.save(req); // üëà bi·∫øn n√†y l√† final

        List<BloodRequestDetail> details = dto.getDetails().stream().map(d -> {
            BloodRequestDetailId id = new BloodRequestDetailId(savedRequest.getReqID(), d.getTypeBlood());
            System.out.println("üëâ typeBlood: " + d.getTypeBlood());
            System.out.println("üëâ reqId: " + id);
            BloodRequestDetail detail = new BloodRequestDetail();
            detail.setId(id);
            detail.setPackCount(d.getPackCount());
            detail.setPackVolume(d.getPackVolume());
            detail.setBloodRequest(savedRequest); // ph·∫£i ƒë√∫ng t√™n bi·∫øn

            return detail;
        }).toList();

        detailRepo.saveAll(details);
        savedRequest.setDetails(details);
        return savedRequest;
    }


    // ‚úÖ 2. C·∫≠p nh·∫≠t y√™u c·∫ßu
    @Transactional
    public BloodRequest updateRequestByMedical(Long id, BloodRequestDTO dto) {
        try {
            BloodRequest req = reqRepo.findById(id)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu"));

            if (!req.getStatus().equals(Status.PENDING)) {
                throw new IllegalStateException("Ch·ªâ ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi tr·∫°ng th√°i l√† PENDING");
            }

            req.setIsEmergency(dto.getIsEmergency());

            // ‚úÖ 1. Xo√° ph·∫ßn t·ª≠ c≈© kh·ªèi collection hi·ªán t·∫°i
            req.getDetails().clear(); // Hibernate t·ª± xo√° v√¨ orphanRemoval = true
            System.out.println("‚úÖ ƒê√£ xo√° detail c≈© b·∫±ng clear()");

            // ‚úÖ 2. Th√™m ph·∫ßn t·ª≠ m·ªõi v√†o collection ƒëang ƒë∆∞·ª£c theo d√µi
            for (BloodRequestDetailDTO d : dto.getDetails()) {
                BloodRequestDetail detail = new BloodRequestDetail();
                detail.setId(new BloodRequestDetailId(id, d.getTypeBlood()));
                detail.setPackCount(d.getPackCount());
                detail.setPackVolume(d.getPackVolume());
                detail.setBloodRequest(req); // THAM CHI·∫æU ƒê√öNG mappedBy
                req.getDetails().add(detail); // TH√äM TR·ª∞C TI·∫æP
            }

            // ‚úÖ 3. L∆∞u BloodRequest, kh√¥ng c·∫ßn saveAll chi ti·∫øt
            return reqRepo.save(req);

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói updateRequestByMedical: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Unexpected error: " + e.getMessage());
        }
    }
    
    // ‚úÖ 3. H·ªßy y√™u c·∫ßu
    public void cancelRequestByMedical(Long id) {
        BloodRequest req = reqRepo.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu"));
        req.setStatus(Status.CANCELLED);
        reqRepo.save(req);
    }

    // ‚úÖ 4. L·∫•y danh s√°ch theo Medical
    public List<BloodRequestResponseDTO> getRequestDTOByMedical(Long medId) {
        List<BloodRequest> requests = reqRepo.findByMedicalStaff_IdAndIsDeletedFalse(medId);
        return requests.stream().map(this::mapToResponseDTO).toList();
    }

    // ‚úÖ 5. Duy·ªát / T·ª´ ch·ªëi
    public BloodRequest respondToRequest(Long id, String action, Long staffId) {
        BloodRequest req = reqRepo.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu"));

        User staff = userRepository.findById(staffId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user"));

        if (staff.getRole() != Role.STAFF) {
            throw new RuntimeException("Ch·ªâ STAFF m·ªõi ƒë∆∞·ª£c duy·ªát y√™u c·∫ßu");
        }

        if (action.equalsIgnoreCase("accept")) {
            req.setStatus(Status.APPROVED);
        } else if (action.equalsIgnoreCase("reject")) {
            req.setStatus(Status.REJECTED);
        } else {
            throw new IllegalArgumentException("H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá");
        }

        req.setHandledBy(staff);
        return reqRepo.save(req);
    }

    // ‚úÖ 6. C·∫≠p nh·∫≠t tr·∫°ng th√°i x·ª≠ l√Ω
    public BloodRequest updateProcessingStatus(Long id, Status status) {
        BloodRequest req = reqRepo.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu"));
        req.setStatus(status);
        return reqRepo.save(req);
    }

    // ‚úÖ 7. L·∫•y theo staff x·ª≠ l√Ω
    public List<BloodRequest> getRequestsByStaff(Long staffId) {
        return reqRepo.findByHandledBy_IdAndIsDeletedFalse(staffId);
    }

    // ‚úÖ 8. L·∫•y t·∫•t c·∫£
    public List<BloodRequestResponseDTO> getAllRequestDTOs() {
        return reqRepo.findAll().stream()
                .filter(r -> !r.getIsDeleted())
                .map(this::mapToResponseDTO)
                .toList();
    }

    // ‚úÖ 9. X√≥a m·ªÅm
    public void delete(Long id) {
        BloodRequest req = reqRepo.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu"));
        req.setIsDeleted(true);
        reqRepo.save(req);
    }

    // ‚úÖ 10. Map sang DTO
    public BloodRequestResponseDTO mapToResponseDTO(BloodRequest req) {
        BloodRequestResponseDTO dto = new BloodRequestResponseDTO();
        dto.setReqID(req.getReqID());
        dto.setIsEmergency(req.getIsEmergency());
        dto.setStatus(req.getStatus().name());
        dto.setReqCreateDate(req.getReqCreateDate());

        List<BloodRequestDetailDTO> detailDTOs = req.getDetails().stream().map(d -> {
            BloodRequestDetailDTO dtoDetail = new BloodRequestDetailDTO();
            dtoDetail.setTypeBlood(d.getId().getTypeBlood());
            dtoDetail.setPackCount(d.getPackCount());
            dtoDetail.setPackVolume(d.getPackVolume());
            return dtoDetail;
        }).toList();

        dto.setDetails(detailDTOs);
        return dto;
    }
}
