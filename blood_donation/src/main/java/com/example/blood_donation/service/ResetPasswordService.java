package com.example.blood_donation.service;

import com.example.blood_donation.dto.ResetPasswordRequest;
import com.example.blood_donation.entity.User;
import com.example.blood_donation.exception.exceptons.BadRequestException;
import com.example.blood_donation.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
@Slf4j
@Service
public class ResetPasswordService {

    @Autowired private UserRepository userRepository;
    @Autowired private TokenService tokenService;
    @Autowired private EmailService emailService;
    @Autowired private PasswordEncoder passwordEncoder;

    // L∆∞u OTP v√† tr·∫°ng th√°i x√°c minh
    private final Map<String, String> otpStorage = new ConcurrentHashMap<>();
    private final Map<String, Boolean> verifiedEmails = new ConcurrentHashMap<>();
    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    /**
     * B1: G·ª≠i m√£ OTP ƒë·∫øn email
     */
    public String generateOtp(String email) {
        System.out.println("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω g·ª≠i OTP cho email: " + email);

        // 1. T√¨m user theo email
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> {
                    System.err.println("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng: " + email);
                    return new BadRequestException("Email kh√¥ng t·ªìn t·∫°i");
                });

        // 2. Sinh m√£ OTP
        String otp = String.valueOf(new Random().nextInt(900000) + 100000);
        otpStorage.put(email, otp);
        System.out.println("M√£ OTP t·∫°o ra: " + otp + " cho email: " + email);

        // 3. ƒê·∫∑t l·ªãch xo√° sau 5 ph√∫t
        scheduler.schedule(() -> {
            otpStorage.remove(email);
            System.out.println("üïí OTP c·ªßa email " + email + " ƒë√£ b·ªã xo√° sau 5 ph√∫t.");
        }, 5, TimeUnit.MINUTES);

        // 4. G·ª≠i email
        try {
            System.out.println("ƒêang g·ª≠i email t·ªõi: " + email);
            emailService.sendOtpEmail(email, otp);
            System.out.println("G·ª≠i email OTP th√†nh c√¥ng cho: " + email);
        } catch (Exception e) {
            System.err.println("L·ªói khi g·ª≠i OTP cho: " + email);
            e.printStackTrace();
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i OTP. Chi ti·∫øt: " + e.getMessage());
        }

        return "ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email.";
    }


    /**
     * B2: X√°c minh OTP
     */
    public String verifyOtp(String email, String otp) {
        String storedOtp = otpStorage.get(email);
        if (storedOtp == null || !storedOtp.equals(otp)) {
            throw new BadRequestException("M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
        }

        verifiedEmails.put(email, true);
        otpStorage.remove(email);

        return "X√°c minh OTP th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.";
    }

    /**
     * B3: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
     */
    public void resetPassword(ResetPasswordRequest request) {
        log.info("Y√™u c·∫ßu reset m·∫≠t kh·∫©u cho email: {}", request.getEmail());

        // T√¨m user theo email
        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new BadRequestException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));

        // So kh·ªõp m·∫≠t kh·∫©u x√°c nh·∫≠n
        if (!request.getNewPassword().equals(request.getConfirmPassword())) {
            log.warn("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp cho email: {}", request.getEmail());
            throw new BadRequestException("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
        }

        // Ki·ªÉm tra x√°c minh OTP b·∫±ng email c·ªßa user
        if (!verifiedEmails.getOrDefault(request.getEmail(), false)) {
            log.warn("Ch∆∞a x√°c minh OTP cho email: {}", request.getEmail());
            throw new BadRequestException("B·∫°n ch∆∞a x√°c minh OTP");
        }

        // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
        user.setPassword(passwordEncoder.encode(request.getNewPassword()));
        userRepository.save(user);

        // D·ªçn d·∫πp
        verifiedEmails.remove(request.getEmail());

        log.info("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng cho email: {}", request.getEmail());
    }
}
